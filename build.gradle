// Gradle task dependencies
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "http://repository.jboss.org/nexus/content/groups/public/"
        }

    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
    }
}

// Plugins adding various tasks involved in this script
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'license'
//apply plugin: 'checkstyle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish-auth'
// Allows jar signing
apply plugin: 'signing'

defaultTasks 'clean', 'licenseFormat', 'build'

// Equivalent to maven groupId, artifactId and version
group 'gov.nasa.jpl.mbee.util'
archivesBaseName = 'mbee_util'
version '2.1.0-SNAPSHOT'

// Minimum version of Java required
sourceCompatibility = 1.7
targetCompatibility = 1.7

// Project dependency repositories
repositories {
    // Hooks to Maven Central
    mavenCentral()
}

dependencies {
    // Dependencies are organized in various ways, in this case:
    // 'groupId:artifactId:version'
    compile 'junit:junit:4.11'
}

// Define the source folder. Normally the source folder is 'src/main/java'. If moved to the
// standard, this section can be removed entirely.
sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
}

// Generates sources jar
task sourceJar(type: Jar) {
    // The classifier is appended at the end of the file name before the extension.
    // Example: mbe_util-2.1.0-SNAPSHOT-sources.jar
    classifier 'sources'
    from sourceSets.main.allSource
}

// Extra properties defined for the project. These can be used in various configurations for
// other tasks that require them.
ext {
    projectName = 'mbee_util'
    inceptionYear = '2013'
    packaging = 'jar'
    url = 'http://example.com/' // TODO Fill in with a proper website url
    description = "MBEE java utilities"
    organization = 'Open-MBEE'
    company = 'California Institute of Technology'
    companyNick = 'CalTech'
    pomFile = file("${project.projectDir}/pom.xml")
    // These fields are optional but can be provided if needed.
    // These are set with the following commandline arguments:
    // '-PciSystem=Jenkins -Pcommit=${GIT_COMMIT} -PbuildNumber=${BUILD_NUMBER}'
    // for a Jenkins installation.
    buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
    ciSystem = project.hasProperty("ciSystem") ? ciSystem : 'unknown'
    commit = project.hasProperty("commit") ? commit : 'unknown'
}

// These artifacts are generated by various tasks, both included from plugins and written in this
// script, and can be accessed for uploading to a maven/ivy repository
artifacts {
    // Includes the produced archives from the jar task (usually the usable binary jar)
    archives jar
    // Includes the written task 'sourceJar' that generates the source jar
    archives sourceJar
}

// Note: These properties can be filled in via commandline arguments
// '-PsonatypeUser=example -PsonatypePassword=password'
// There have been attempts to use the maven-publish-auth plugin for automated reading of the
// .m2/settings.xml for authentication, however, changing of the upload task to the unstable
// publish task is required.
def sonatypeUser = hasProperty('sonatypeUser') ? sonatypeUser : System.getenv('sonatypeUser')
def sonatypePassword = hasProperty('sonatypePassword') ? sonatypePassword : System.getenv('sonatypePassword')

// Uploads the produced archives from the 'artifacts' task in a sudo-Maven like manner.
// The repositories defined are
// Note: To use this task, add the commandline argument 'uploadArchives'.
uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment ->
            // Generates the pom and signs the pom as necessary
            signing.signPom(deployment)
        }
        repository(id: 'artifactory', url: "http://europambee-build.jpl.nasa.gov:8082/artifactory/libs-release-local") {
            authentication(userName: sonatypeUser, password: sonatypePassword)

        }
        snapshotRepository(id: 'artifactory', url: "http://europambee-build.jpl.nasa.gov:8082/artifactory/libs-snapshot-local") {
            authentication(userName: sonatypeUser, password: sonatypePassword)
        }
        // TODO For Completedness, this pom is generated for uploading to the Maven/Ivy repository
        // The commented fields should be filled in in order for this utility to be accepted to
        // Maven Central.
        pom {
            groupId = project.group
            version = project.version
            artifactId = project.archivesBaseName
            project {
                name project.archivesBaseName
                packaging 'jar'
                description 'MBEE java utilities'
                  // url 'http://example.com/'
                  // Central repository requirements
                scm {
                    url 'https://github.com/Open-MBEE/util'
                    connection 'git'
                    developerConnection 'git@github.com:Open-MBEE/util.git'
                }
                // TODO Note the authors of this project according to
                // developers {
                //     developer {
                //         id 'example'
                //         name 'Example'
                //         email 'example@example.com'
                //     }
                // }
            }
        }
    }
}

// This Signing task depends on GNU Privacy Guard generated keys.
// More information can be found here: http://www.gradle.org/docs/current/userguide/signing_plugin.html
// This task is automatically skipped if the Gradle is not configured to use any
// GPG keys.
signing {
    required {
        gradle.taskGraph.hasTask("uploadArchives")
    }
    // Automatically signs the produced binaries included in the artifacts configuration section
    sign configurations.archives
}

// Includes the following resources in the final jar from the jar task.
processResources {
    from 'License.txt'
    from 'src/rebel.xml'
    from 'README.txt' // Optional inclusion, but can be considered
}

// Processes the license information for headers
license {
    ext.name = project.name
    ext.company = project.company
    ext.companyNick = project.companyNick
    ext.url = project.url
    ext.year = project.inceptionYear
    exclude "**/*.xml"
    header file("License.txt")
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'JAVADOC_STYLE'
    }
}

// Checkstyle task - Should be considered for uniformity
//checkstyle {
//    configProperties = [
//            "name"        : project.name,
//            "organization": project.organization,
//            "url"         : project.url,
//            "year"        : project.inceptionYear
//    ]
//    configFile = file("checkstyle.xml")
//}


jar {
    // Generates the manifest and customizes certain attributes
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
                "Built-By": System.properties['user.name'],
                "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
                "Implementation-Vendor": url
        )
    }
    from ("${projectDir}") {
        include('License.txt')
    }
}

// Java compiler configuration
configure([compileJava, compileTestJava]) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    options.deprecation = true
    options.encoding = 'utf8'
}
